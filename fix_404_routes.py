#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã 404 Not Found –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ main.py
"""

import os
import sys

def check_main_py():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç main.py"""
    
    main_file = '/opt/reverse-proxy-monitor/main.py'
    
    if not os.path.exists(main_file):
        print("‚ùå main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(main_file, 'r') as f:
        content = f.read()
    
    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ main.py:")
    print("=" * 50)
    print(content)
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –µ—Å—Ç—å
    required_imports = [
        'from backend.app import app',
        'from backend.api import auth',
        'from backend.ui import routes'
    ]
    
    missing_imports = []
    for imp in required_imports:
        if imp not in content:
            missing_imports.append(imp)
    
    if missing_imports:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–º–ø–æ—Ä—Ç—ã: {missing_imports}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–æ–≤
    required_routers = [
        'app.include_router(auth.router, prefix="/api/auth")',
        'app.include_router(routes.router)'
    ]
    
    missing_routers = []
    for router in required_routers:
        if router not in content:
            missing_routers.append(router)
    
    if missing_routers:
        print(f"‚ö†Ô∏è –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–æ—É—Ç–µ—Ä—ã: {missing_routers}")
        return False
    
    print("‚úÖ main.py –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def fix_main_py():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π main.py"""
    
    main_file = '/opt/reverse-proxy-monitor/main.py'
    
    correct_main_content = '''"""
Main application entry point for Reverse Proxy & Monitor.
"""
import uvicorn
from backend.app import app
from backend.api import auth
from backend.ui import routes

# Include API routes
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])

# Include UI routes
app.include_router(routes.router)

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=5000,
        reload=False,
        log_level="info"
    )
'''
    
    with open(main_file, 'w') as f:
        f.write(correct_main_content)
    
    print("‚úÖ main.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")

def check_app_py():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç backend/app.py"""
    
    app_file = '/opt/reverse-proxy-monitor/backend/app.py'
    
    if not os.path.exists(app_file):
        print("‚ùå backend/app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(app_file, 'r') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ FastAPI app —Å–æ–∑–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if 'app = FastAPI(' not in content:
        print("‚ö†Ô∏è FastAPI app –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ backend/app.py")
        return False
    
    print("‚úÖ backend/app.py –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def check_routes_py():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç backend/ui/routes.py"""
    
    routes_file = '/opt/reverse-proxy-monitor/backend/ui/routes.py'
    
    if not os.path.exists(routes_file):
        print("‚ùå backend/ui/routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(routes_file, 'r') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ router —Å–æ–∑–¥–∞–Ω
    if 'router = APIRouter()' not in content:
        print("‚ö†Ô∏è APIRouter –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ routes.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    if '@router.get("/")' not in content:
        print("‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç / –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False
    
    print("‚úÖ backend/ui/routes.py –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def check_service_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞:")
    os.system("systemctl status reverse-proxy-monitor --no-pager -l")

def restart_service():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å"""
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
    os.system("systemctl restart reverse-proxy-monitor")
    print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
    os.system("systemctl status reverse-proxy-monitor --no-pager -l")

def check_logs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    print("\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
    os.system("journalctl -u reverse-proxy-monitor --no-pager -n 20")

if __name__ == "__main__":
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã 404 Not Found...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    main_ok = check_main_py()
    app_ok = check_app_py()
    routes_ok = check_routes_py()
    
    if not main_ok:
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º main.py...")
        fix_main_py()
        main_ok = True
    
    if main_ok and app_ok and routes_ok:
        print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        restart_service()
        check_logs()
    else:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        if not app_ok:
            print("- backend/app.py")
        if not routes_ok:
            print("- backend/ui/routes.py")
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–Ω—Ü–µ
    check_service_status()
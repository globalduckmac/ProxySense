#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Basic Authentication —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""
import os
import sys

def show_current_settings():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    print("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Basic Auth:")
    
    # –ß–∏—Ç–∞–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
    env_path = ".env"
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            lines = f.readlines()
            
        for line in lines:
            if line.strip().startswith(('BASIC_AUTH_')):
                key, value = line.strip().split('=', 1)
                if 'PASSWORD' in key:
                    value = '*' * len(value)  # –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                print(f"   {key}: {value}")
    else:
        print("   –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print()

def change_credentials(username=None, password=None):
    """–ò–∑–º–µ–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    if not username:
        username = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    if not password:
        password = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ").strip()
    
    if not username or not password:
        print("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    env_path = ".env"
    env_lines = []
    
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            env_lines = f.readlines()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    env_lines = [line for line in env_lines if not any(
        line.strip().startswith(key) for key in 
        ['BASIC_AUTH_USERNAME', 'BASIC_AUTH_PASSWORD']
    )]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    updated = False
    for i, line in enumerate(env_lines):
        if line.strip().startswith('BASIC_AUTH_ENABLED'):
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ BASIC_AUTH_ENABLED
            env_lines.insert(i + 1, f"BASIC_AUTH_USERNAME={username}\n")
            env_lines.insert(i + 2, f"BASIC_AUTH_PASSWORD={password}\n")
            updated = True
            break
    
    if not updated:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        env_lines.append(f"BASIC_AUTH_USERNAME={username}\n")
        env_lines.append(f"BASIC_AUTH_PASSWORD={password}\n")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(env_path, 'w') as f:
        f.writelines(env_lines)
    
    print(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:")
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    print(f"   –ü–∞—Ä–æ–ª—å: {'*' * len(password)}")
    print()
    print("‚ÑπÔ∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    return True

def toggle_basic_auth():
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Basic Auth."""
    env_path = ".env"
    if not os.path.exists(env_path):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(env_path, 'r') as f:
        lines = f.readlines()
    
    # –ù–∞–π—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    enabled = False
    for line in lines:
        if line.strip().startswith('BASIC_AUTH_ENABLED'):
            enabled = line.strip().split('=')[1].lower() == 'true'
            break
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    new_state = not enabled
    
    for i, line in enumerate(lines):
        if line.strip().startswith('BASIC_AUTH_ENABLED'):
            lines[i] = f"BASIC_AUTH_ENABLED={'true' if new_state else 'false'}\n"
            break
    
    with open(env_path, 'w') as f:
        f.writelines(lines)
    
    print(f"‚úÖ Basic Authentication {'–≤–∫–ª—é—á–µ–Ω–∞' if new_state else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
    print("‚ÑπÔ∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

def main():
    if len(sys.argv) < 2:
        print("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Basic Authentication")
        print()
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  status           - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("  change           - –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)")
        print("  change <user> <pass> - –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
        print("  toggle           - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Basic Auth")
        print("  quick <pass>     - –±—ã—Å—Ç—Ä–æ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å (–ª–æ–≥–∏–Ω –æ—Å—Ç–∞–µ—Ç—Å—è)")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python3 manage_basic_auth.py status")
        print("  python3 manage_basic_auth.py change admin newpassword123")
        print("  python3 manage_basic_auth.py quick mysecretpass")
        print("  python3 manage_basic_auth.py toggle")
        return
    
    command = sys.argv[1].lower()
    
    if command == "status":
        show_current_settings()
        
    elif command == "change":
        if len(sys.argv) >= 4:
            username = sys.argv[2]
            password = sys.argv[3]
            change_credentials(username, password)
        else:
            change_credentials()
            
    elif command == "quick":
        if len(sys.argv) >= 3:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π username
            current_user = "admin"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            env_path = ".env"
            if os.path.exists(env_path):
                with open(env_path, 'r') as f:
                    for line in f:
                        if line.strip().startswith('BASIC_AUTH_USERNAME='):
                            current_user = line.strip().split('=', 1)[1]
                            break
            
            new_password = sys.argv[2]
            change_credentials(current_user, new_password)
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
            print("–ü—Ä–∏–º–µ—Ä: python3 manage_basic_auth.py quick newpassword")
            
    elif command == "toggle":
        toggle_basic_auth()
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main()
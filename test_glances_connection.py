#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Glances API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.
"""
import asyncio
import httpx
import time
import sys
from typing import Optional

async def test_glances_url(url: str, timeout: int = 30) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Glances API."""
    results = {
        'url': url,
        'timeout': timeout,
        'success': False,
        'status_code': None,
        'response_time': 0,
        'data_size': 0,
        'error': None
    }
    
    start_time = time.time()
    
    try:
        timeout_config = httpx.Timeout(
            connect=10.0,
            read=timeout,
            write=10.0,
            pool=10.0
        )
        
        async with httpx.AsyncClient(
            timeout=timeout_config,
            limits=httpx.Limits(max_connections=10, max_keepalive_connections=5),
            headers={"User-Agent": "Reverse-Proxy-Monitor-Test/1.0"}
        ) as client:
            
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}...")
            
            response = await client.get(url)
            
            end_time = time.time()
            results['response_time'] = round(end_time - start_time, 2)
            results['status_code'] = response.status_code
            
            if response.status_code == 200:
                data = response.json()
                results['data_size'] = len(str(data))
                results['success'] = True
                
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {results['response_time']}s")
                print(f"   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {results['data_size']} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
                key_fields = ['cpu', 'mem', 'load', 'uptime']
                found_fields = [field for field in key_fields if field in data]
                print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(found_fields)}")
                
            else:
                results['error'] = f"HTTP {response.status_code}"
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
    
    except httpx.TimeoutException as e:
        end_time = time.time()
        results['response_time'] = round(end_time - start_time, 2)
        results['error'] = f"Timeout: {str(e)}"
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç ({results['response_time']}s): {e}")
        
    except httpx.ConnectError as e:
        end_time = time.time()
        results['response_time'] = round(end_time - start_time, 2)
        results['error'] = f"Connection Error: {str(e)}"
        print(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        end_time = time.time()
        results['response_time'] = round(end_time - start_time, 2)
        results['error'] = f"Unexpected: {str(e)}"
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return results

async def test_multiple_timeouts(url: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã."""
    timeouts = [5, 10, 15, 30, 60]
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è {url}\n")
    
    results = []
    for timeout in timeouts:
        print(f"--- –¢–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}s ---")
        result = await test_glances_url(url, timeout)
        results.append(result)
        print()
        
        # –ï—Å–ª–∏ —É–¥–∞—á–Ω–æ —Å —Ç–µ–∫—É—â–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if result['success']:
            print(f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –Ω–∞–π–¥–µ–Ω: {timeout}s")
            break
    
    return results

def print_summary(results: list):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*60)
    
    for result in results:
        status = "‚úÖ –£—Å–ø–µ—Ö" if result['success'] else "‚ùå –û—à–∏–±–∫–∞"
        print(f"–¢–∞–π–º–∞—É—Ç: {result['timeout']}s | {status} | –í—Ä–µ–º—è: {result['response_time']}s")
        if result['error']:
            print(f"   –û—à–∏–±–∫–∞: {result['error']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    successful_results = [r for r in results if r['success']]
    if successful_results:
        min_timeout = min(r['timeout'] for r in successful_results)
        avg_time = sum(r['response_time'] for r in successful_results) / len(successful_results)
        
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Ç–∞–π–º–∞—É—Ç: {min_timeout}s")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {round(avg_time, 2)}s")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç: {max(min_timeout + 5, 30)}s")
    else:
        print(f"\n‚ö†Ô∏è  –ù–ò –û–î–ò–ù –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û")
        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Glances API")
        print(f"   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

async def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_glances_connection.py <glances_url>")
        print("–ü—Ä–∏–º–µ—Ä: python3 test_glances_connection.py http://109.120.150.248:61208/api/4/all")
        sys.exit(1)
    
    url = sys.argv[1]
    
    print("üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö GLANCES API")
    print("="*60)
    print(f"URL: {url}")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    print(f"\nüöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10s:")
    quick_result = await test_glances_url(url, 10)
    
    if quick_result['success']:
        print(f"\nüéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! API —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    else:
        print(f"\nüîÑ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        results = await test_multiple_timeouts(url)
        print_summary(results)

if __name__ == "__main__":
    asyncio.run(main())
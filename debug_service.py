#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–≤–∏—Å–æ–º reverse-proxy-monitor
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ /opt/reverse-proxy-monitor
"""
import sys
import os
import subprocess
import traceback

def log(message):
    print(f"[DEBUG] {message}")

def run_command(cmd, capture_output=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=capture_output, text=True)
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return -1, "", str(e)

def check_service_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    
    retcode, stdout, stderr = run_command("systemctl status reverse-proxy-monitor")
    print("=== –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–ê ===")
    print(stdout)
    if stderr:
        print("STDERR:", stderr)
    print()

def check_service_logs():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞...")
    
    retcode, stdout, stderr = run_command("journalctl -u reverse-proxy-monitor --no-pager -n 20")
    print("=== –õ–û–ì–ò –°–ï–†–í–ò–°–ê ===")
    print(stdout)
    if stderr:
        print("STDERR:", stderr)
    print()

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    print("=== –û–ö–†–£–ñ–ï–ù–ò–ï ===")
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"Python –ø—É—Ç—å: {sys.executable}")
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    files_to_check = [
        'main.py', 
        'backend/app.py', 
        'backend/models.py',
        'backend/config.py',
        'venv/bin/python',
        '.env'
    ]
    
    for file in files_to_check:
        exists = "‚úÖ" if os.path.exists(file) else "‚ùå"
        print(f"{exists} {file}")
    print()

def test_import():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç—ã"""
    log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    print("=== –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í ===")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
    sys.path.insert(0, '/opt/reverse-proxy-monitor')
    
    modules_to_test = [
        'backend.config',
        'backend.database', 
        'backend.models',
        'backend.app',
        'backend.api.auth',
        'backend.ui.routes'
    ]
    
    for module in modules_to_test:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except Exception as e:
            print(f"‚ùå {module}: {e}")
            traceback.print_exc()
    print()

def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    print("=== –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    sys.path.insert(0, '/opt/reverse-proxy-monitor')
    
    try:
        from backend.database import engine, SessionLocal
        from backend.models import User
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        db = SessionLocal()
        users = db.query(User).count()
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
        db.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        traceback.print_exc()
    print()

def test_run_main():
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å main.py –Ω–∞–ø—Ä—è–º—É—é"""
    log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ main.py...")
    
    print("=== –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê MAIN.PY ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    venv_python = "/opt/reverse-proxy-monitor/venv/bin/python"
    if os.path.exists(venv_python):
        print(f"‚úÖ venv Python –Ω–∞–π–¥–µ–Ω: {venv_python}")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            cmd = f"cd /opt/reverse-proxy-monitor && timeout 10s {venv_python} main.py"
            retcode, stdout, stderr = run_command(cmd)
            
            print(f"Return code: {retcode}")
            if stdout:
                print("STDOUT:")
                print(stdout)
            if stderr:
                print("STDERR:")
                print(stderr)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    else:
        print(f"‚ùå venv Python –Ω–µ –Ω–∞–π–¥–µ–Ω: {venv_python}")
    print()

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê REVERSE-PROXY-MONITOR")
    print("=" * 50)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    try:
        os.chdir('/opt/reverse-proxy-monitor')
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ /opt/reverse-proxy-monitor: {e}")
        return
    
    check_environment()
    check_service_status()
    check_service_logs()
    test_import()
    test_database()
    test_run_main()
    
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: systemctl restart reverse-proxy-monitor")

if __name__ == "__main__":
    main()
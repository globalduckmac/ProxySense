#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
"""

import os
import subprocess
import time

def check_service_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:")
    os.system("systemctl status reverse-proxy-monitor --no-pager")
    
def check_service_logs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
    os.system("journalctl -u reverse-proxy-monitor --no-pager -n 30")

def test_manual_start():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:")
    print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é...")
    
    os.chdir("/opt/reverse-proxy-monitor")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    result = subprocess.run([
        "/bin/bash", "-c", 
        "cd /opt/reverse-proxy-monitor && source venv/bin/activate && python main.py &"
    ], capture_output=True, text=True, timeout=10)
    
    print("STDOUT:", result.stdout)
    print("STDERR:", result.stderr)
    print("Return code:", result.returncode)
    
    # –î–∞–¥–∏–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Ä—Ç
    port_result = subprocess.run(["netstat", "-tlnp", "|", "grep", "5000"], 
                                shell=True, capture_output=True, text=True)
    print("\n–ü–æ—Ä—Ç 5000:", port_result.stdout)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    
    os.chdir("/opt/reverse-proxy-monitor")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞–∫–µ—Ç–æ–≤
    result = subprocess.run([
        "/bin/bash", "-c",
        "cd /opt/reverse-proxy-monitor && source venv/bin/activate && pip list | grep -E '(fastapi|uvicorn|sqlalchemy)'"
    ], capture_output=True, text=True)
    
    print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
    print(result.stdout)
    
    if result.stderr:
        print("–û—à–∏–±–∫–∏:", result.stderr)

def check_python_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤"""
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
    
    files_to_check = [
        "/opt/reverse-proxy-monitor/main.py",
        "/opt/reverse-proxy-monitor/backend/app.py",
        "/opt/reverse-proxy-monitor/backend/ui/routes.py"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            result = subprocess.run([
                "python3", "-m", "py_compile", file_path
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ {file_path} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK")
            else:
                print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
                print(result.stderr)

def check_permissions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:")
    os.system("ls -la /opt/reverse-proxy-monitor/ | head -10")
    
    print("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å rpmonitor:")
    os.system("id rpmonitor")

def fix_service_issues():
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
    print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
    os.system("systemctl stop reverse-proxy-monitor")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã
    print("–£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python...")
    os.system("pkill -f 'python.*main.py' || true")
    
    # –ú–µ–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–π–ª–æ–≤
    print("–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...")
    os.system("chown -R rpmonitor:rpmonitor /opt/reverse-proxy-monitor/")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
    print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd...")
    os.system("systemctl daemon-reload")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
    os.system("systemctl start reverse-proxy-monitor")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    time.sleep(5)
    
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...")
    os.system("systemctl status reverse-proxy-monitor --no-pager")

if __name__ == "__main__":
    print("üîß –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å–µ—Ä–≤–∏—Å–∞ reverse-proxy-monitor...")
    
    check_service_status()
    check_service_logs()
    check_python_syntax()
    check_dependencies()
    check_permissions()
    
    print("\n" + "="*50)
    print("–ü–û–ü–´–¢–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("="*50)
    
    fix_service_issues()
    
    print("\nüåê –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    time.sleep(2)
    os.system("curl -I http://localhost:5000/ || echo '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å'")
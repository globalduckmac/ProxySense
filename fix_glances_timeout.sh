#!/bin/bash

###############################################################################
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï GLANCES TIMEOUT –ü–†–û–ë–õ–ï–ú–´
# –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã –∏ —É–ª—É—á—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
###############################################################################

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root
if [[ $EUID -ne 0 ]]; then
    error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo"
fi

log "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Glances..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cd /opt/reverse-proxy-monitor || error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞..."
systemctl stop reverse-proxy-monitor

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤..."
cp backend/config.py backend/config.py.backup.$(date +%s)
cp backend/glances_client.py backend/glances_client.py.backup.$(date +%s)

# –û–±–Ω–æ–≤–ª—è–µ–º config.py - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç Glances
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –≤ config.py..."
sed -i 's/GLANCES_TIMEOUT: int = 10/GLANCES_TIMEOUT: int = 30  # –£–≤–µ–ª–∏—á–µ–Ω —Å 10 –¥–æ 30 —Å–µ–∫—É–Ω–¥/' backend/config.py

# –û–±–Ω–æ–≤–ª—è–µ–º glances_client.py —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ glances_client.py..."
cat > backend/glances_client.py << 'EOF'
"""
Glances API client for monitoring server metrics.
"""
import httpx
import asyncio
from typing import Optional, Dict, Any, Tuple
import logging

from backend.config import settings

logger = logging.getLogger(__name__)


class GlancesClient:
    """Client for interacting with Glances API."""
    
    def __init__(self):
        self.timeout = settings.GLANCES_TIMEOUT
    
    async def get_all_stats(self, url: str, auth: Optional[Tuple[str, str]] = None,
                           headers: Optional[Dict[str, str]] = None,
                           timeout: Optional[int] = None) -> Optional[Dict[str, Any]]:
        """Get all statistics from Glances API."""
        timeout = timeout or self.timeout
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            timeout_config = httpx.Timeout(
                connect=10.0,  # —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                read=timeout,   # —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                write=10.0,     # —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
                pool=10.0       # —Ç–∞–π–º–∞—É—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            )
            
            async with httpx.AsyncClient(
                timeout=timeout_config,
                limits=httpx.Limits(max_connections=10, max_keepalive_connections=5),
                headers={"User-Agent": "Reverse-Proxy-Monitor/1.0"}
            ) as client:
                
                logger.debug(f"Fetching Glances data from {url} with timeout {timeout}s")
                
                response = await client.get(
                    url,
                    auth=auth,
                    headers=headers or {}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    logger.debug(f"Successfully fetched Glances data from {url}, data size: {len(str(data))}")
                    return data
                else:
                    logger.warning(f"Glances API returned status {response.status_code}: {response.text[:200]}")
                    return None
        
        except httpx.TimeoutException as e:
            logger.warning(f"Timeout while fetching Glances data from {url}: {str(e)}")
            return None
        except httpx.ConnectError as e:
            logger.warning(f"Connection error while fetching Glances data from {url}: {str(e)}")
            return None
        except httpx.HTTPStatusError as e:
            logger.warning(f"HTTP error while fetching Glances data from {url}: {e.response.status_code}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error fetching Glances data from {url}: {e}")
            return None
    
    async def get_cpu_stats(self, url: str, auth: Optional[Tuple[str, str]] = None,
                           headers: Optional[Dict[str, str]] = None) -> Optional[Dict[str, Any]]:
        """Get CPU statistics from Glances API."""
        try:
            cpu_url = url.replace("/api/4/all", "/api/4/cpu")
            
            timeout_config = httpx.Timeout(
                connect=10.0,
                read=self.timeout,
                write=10.0,
                pool=10.0
            )
            
            async with httpx.AsyncClient(
                timeout=timeout_config,
                headers={"User-Agent": "Reverse-Proxy-Monitor/1.0"}
            ) as client:
                response = await client.get(
                    cpu_url,
                    auth=auth,
                    headers=headers or {}
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.warning(f"Failed to get CPU stats: {response.status_code}")
                    return None
        
        except Exception as e:
            logger.error(f"Error fetching CPU stats: {e}")
            return None
    
    async def get_memory_stats(self, url: str, auth: Optional[Tuple[str, str]] = None,
                              headers: Optional[Dict[str, str]] = None) -> Optional[Dict[str, Any]]:
        """Get memory statistics from Glances API."""
        try:
            memory_url = url.replace("/api/4/all", "/api/4/mem")
            
            timeout_config = httpx.Timeout(
                connect=10.0,
                read=self.timeout,
                write=10.0,
                pool=10.0
            )
            
            async with httpx.AsyncClient(
                timeout=timeout_config,
                headers={"User-Agent": "Reverse-Proxy-Monitor/1.0"}
            ) as client:
                response = await client.get(
                    memory_url,
                    auth=auth,
                    headers=headers or {}
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.warning(f"Failed to get memory stats: {response.status_code}")
                    return None
        
        except Exception as e:
            logger.error(f"Error fetching memory stats: {e}")
            return None
    
    async def get_disk_stats(self, url: str, auth: Optional[Tuple[str, str]] = None,
                            headers: Optional[Dict[str, str]] = None) -> Optional[Dict[str, Any]]:
        """Get disk statistics from Glances API."""
        try:
            disk_url = url.replace("/api/4/all", "/api/4/fs")
            
            timeout_config = httpx.Timeout(
                connect=10.0,
                read=self.timeout,
                write=10.0,
                pool=10.0
            )
            
            async with httpx.AsyncClient(
                timeout=timeout_config,
                headers={"User-Agent": "Reverse-Proxy-Monitor/1.0"}
            ) as client:
                response = await client.get(
                    disk_url,
                    auth=auth,
                    headers=headers or {}
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.warning(f"Failed to get disk stats: {response.status_code}")
                    return None
        
        except Exception as e:
            logger.error(f"Error fetching disk stats: {e}")
            return None

    async def test_connection(self, url: str, auth: Optional[Tuple[str, str]] = None,
                             headers: Optional[Dict[str, str]] = None) -> bool:
        """Test connection to Glances API."""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            timeout_config = httpx.Timeout(
                connect=5.0,
                read=15.0,
                write=5.0,
                pool=5.0
            )
            
            async with httpx.AsyncClient(
                timeout=timeout_config,
                headers={"User-Agent": "Reverse-Proxy-Monitor/1.0"}
            ) as client:
                response = await client.get(
                    url,
                    auth=auth,
                    headers=headers or {}
                )
                
                if response.status_code == 200:
                    logger.info(f"Successfully connected to Glances API at {url}")
                    return True
                else:
                    logger.warning(f"Glances API test failed with status {response.status_code}")
                    return False
        
        except Exception as e:
            logger.error(f"Failed to test Glances connection: {e}")
            return False


# Global instance
glances_client = GlancesClient()
EOF

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
log "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chown -R rpmonitor:rpmonitor /opt/reverse-proxy-monitor/

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
log "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
systemctl start reverse-proxy-monitor

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
if systemctl is-active --quiet reverse-proxy-monitor; then
    log "‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Glances"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    echo
    log "üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    echo "   GLANCES_TIMEOUT: 30 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 10)"
    echo "   –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    echo "   –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"
    echo "   –î–æ–±–∞–≤–ª–µ–Ω User-Agent –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
    
    echo
    log "üåê –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–æ–≤"
    echo "   2. –ù–∞–∂–º–∏—Ç–µ '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "   3. –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —Ç–∞–π–º–∞—É—Ç–∞"
    
    echo
    log "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞:"
    journalctl -u reverse-proxy-monitor -n 10 --no-pager
    
else
    error "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: sudo journalctl -u reverse-proxy-monitor -f"
fi

log "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Glances —Ç–∞–π–º–∞—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
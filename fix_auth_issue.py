#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å cookie –∏ secure –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import os

# –§–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
files_to_fix = [
    '/opt/reverse-proxy-monitor/backend/ui/routes.py'
]

def fix_cookie_settings():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookie –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Nginx proxy"""
    
    routes_file = '/opt/reverse-proxy-monitor/backend/ui/routes.py'
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(routes_file, 'r') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookie
    old_cookie_code = '''    response.set_cookie(
        key="access_token",
        value=access_token,
        max_age=settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60,
        httponly=True,
        secure=not settings.DEBUG
    )'''
    
    new_cookie_code = '''    response.set_cookie(
        key="access_token",
        value=access_token,
        max_age=settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60,
        httponly=True,
        secure=False,
        samesite='lax'
    )'''
    
    if old_cookie_code in content:
        content = content.replace(old_cookie_code, new_cookie_code)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(routes_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookie –≤ routes.py")
        return True
    else:
        print("‚ö†Ô∏è –ö–æ–¥ cookie –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

def add_debug_logging():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    routes_file = '/opt/reverse-proxy-monitor/backend/ui/routes.py'
    
    with open(routes_file, 'r') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ —Ñ—É–Ω–∫—Ü–∏—é get_current_user_optional
    debug_code = '''def get_current_user_optional(request: Request, db: Session = Depends(get_db)) -> Optional[User]:
    """Get current user from session, return None if not authenticated."""
    try:
        token = request.cookies.get("access_token")
        logger.info(f"Cookie access_token: {token is not None}")
        if not token:
            logger.info("No access_token cookie found")
            return None
        
        from backend.auth import verify_token
        username = verify_token(token)
        logger.info(f"Token verified, username: {username}")
        if not username:
            logger.info("Token verification failed")
            return None
        
        user = db.query(User).filter(User.username == username).first()
        result = user if user and user.is_active else None
        logger.info(f"User lookup result: {result is not None}")
        return result
    except Exception as e:
        logger.error(f"Error in get_current_user_optional: {e}")
        return None'''
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    old_function_start = 'def get_current_user_optional(request: Request, db: Session = Depends(get_db)) -> Optional[User]:'
    
    if old_function_start in content:
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
        start_pos = content.find(old_function_start)
        if start_pos != -1:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ @router
            end_markers = ['\n\n@router', '\n\nasync def', '\n\ndef ']
            end_pos = len(content)
            
            for marker in end_markers:
                marker_pos = content.find(marker, start_pos + 100)  # –∏—â–µ–º –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                if marker_pos != -1 and marker_pos < end_pos:
                    end_pos = marker_pos
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            old_function = content[start_pos:end_pos]
            content = content.replace(old_function, debug_code + '\n\n')
            
            with open(routes_file, 'w') as f:
                f.write(content)
            
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ get_current_user_optional")
            return True
    
    print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è get_current_user_optional –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    return False

def restart_service():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å"""
    os.system("systemctl restart reverse-proxy-monitor")
    print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    cookie_fixed = fix_cookie_settings()
    debug_added = add_debug_logging()
    
    if cookie_fixed or debug_added:
        print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
        restart_service()
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.")
    else:
        print("\n‚ö†Ô∏è –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")
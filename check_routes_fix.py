#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend/ui/routes.py
"""

import os

def check_and_fix_routes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç routes.py"""
    
    routes_file = '/opt/reverse-proxy-monitor/backend/ui/routes.py'
    
    if not os.path.exists(routes_file):
        print("‚ùå backend/ui/routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(routes_file, 'r') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    if '@router.get("/")' not in content:
        print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç / –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        router_creation = 'router = APIRouter()'
        if router_creation in content:
            # –ù–∞–π–¥–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è router
            pos = content.find(router_creation) + len(router_creation)
            
            # –î–æ–±–∞–≤–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç
            main_route = '''


@router.get("/", response_class=HTMLResponse)
async def index(
    request: Request,
    db: Session = Depends(get_db)
):
    """Main dashboard page."""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ cookie
    token = request.cookies.get("access_token")
    if not token:
        return RedirectResponse(url="/auth/login", status_code=302)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    from backend.auth import verify_token
    username = verify_token(token)
    if not username:
        return RedirectResponse(url="/auth/login", status_code=302)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from backend.models import User
    user = db.query(User).filter(User.username == username).first()
    if not user or not user.is_active:
        return RedirectResponse(url="/auth/login", status_code=302)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    from backend.models import Server, Domain, Alert
    from sqlalchemy import func
    
    total_servers = db.query(func.count(Server.id)).scalar() or 0
    total_domains = db.query(func.count(Domain.id)).scalar() or 0
    unresolved_alerts = db.query(func.count(Alert.id)).filter(Alert.is_resolved == False).scalar() or 0
    
    return templates.TemplateResponse("index.html", {
        "request": request,
        "current_user": user,
        "stats": {
            "total_servers": total_servers,
            "online_servers": 0,
            "total_domains": total_domains,
            "ssl_domains": 0,
            "unresolved_alerts": unresolved_alerts
        },
        "recent_tasks": [],
        "recent_alerts": []
    })'''
            
            new_content = content[:pos] + main_route + content[pos:]
            
            with open(routes_file, 'w') as f:
                f.write(new_content)
            
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç /")
            return True
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω APIRouter() –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞")
            return False
    else:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç / —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True

if __name__ == "__main__":
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ routes.py...")
    
    if check_and_fix_routes():
        print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
        os.system("systemctl restart reverse-proxy-monitor")
        print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        
        print("\nüìú –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:")
        os.system("journalctl -u reverse-proxy-monitor --no-pager -n 10")
        
        print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        os.system("curl -I http://localhost:5000/")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å routes.py")
#!/bin/bash

###############################################################################
# –ü–†–û–°–¢–û–ô –°–ö–†–ò–ü–¢ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø REVERSE PROXY MONITOR
# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
###############################################################################

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root
if [[ $EUID -ne 0 ]]; then
    error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo"
fi

log "üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏..."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
apt-get update -y
apt-get install -y python3.11 python3.11-venv python3-pip postgresql postgresql-contrib nginx git

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
systemctl start postgresql
systemctl enable postgresql

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
DB_PASSWORD=$(openssl rand -base64 16)
sudo -u postgres psql <<EOF
CREATE DATABASE reverse_proxy_monitor;
CREATE USER rpmonitor WITH ENCRYPTED PASSWORD '${DB_PASSWORD}';
GRANT ALL PRIVILEGES ON DATABASE reverse_proxy_monitor TO rpmonitor;
ALTER USER rpmonitor CREATEDB;
\q
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
log "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
if ! id "rpmonitor" &>/dev/null; then
    useradd --system --shell /bin/bash --home /opt/reverse-proxy-monitor --create-home rpmonitor
fi

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
log "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

# –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
if [[ -d "/opt/reverse-proxy-monitor" && ! -d "/opt/reverse-proxy-monitor/.git" ]]; then
    log "–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    rm -rf /opt/reverse-proxy-monitor/*
    rm -rf /opt/reverse-proxy-monitor/.[^.]*
fi

cd /opt/reverse-proxy-monitor

if [[ ! -d ".git" ]]; then
    git clone https://github.com/globalduckmac/ProxySense.git .
else
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    git stash push -m "Auto-stash $(date)" || true
    git pull origin main
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3.11 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install -r setup_requirements.txt

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
log "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
JWT_SECRET=$(openssl rand -hex 32)
ENCRYPTION_KEY=$(python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")

cat > .env << EOF
DATABASE_URL=postgresql://rpmonitor:${DB_PASSWORD}@localhost:5432/reverse_proxy_monitor
JWT_SECRET_KEY=${JWT_SECRET}
ENCRYPTION_KEY=${ENCRYPTION_KEY}
DEBUG=false
ENVIRONMENT=production

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
DB_POOL_TIMEOUT=60
COOKIE_SECURE=false
COOKIE_SAMESITE=lax

DNS_SERVERS=8.8.8.8,1.1.1.1
SERVER_CHECK_INTERVAL=300
NS_CHECK_INTERVAL=3600
ALERT_COOLDOWN=1800
EOF

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py (–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï)
log "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py..."
cat > main.py << 'EOF'
"""
Main application entry point - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import uvicorn
from backend.app import app
from backend.api import auth
from backend.ui import routes

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 404 –æ—à–∏–±–æ–∫)
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
app.include_router(routes.router)

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=5000,
        reload=False,
        log_level="info"
    )
EOF

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º backend/config.py
cat > backend/config.py << 'EOF'
"""
Application configuration management.
"""
import os
from pydantic_settings import BaseSettings
from typing import List


class Settings(BaseSettings):
    """Application settings."""
    
    # Database
    DATABASE_URL: str = "sqlite:///./app.db"
    
    # Security
    SECRET_KEY: str = "dev-secret-key-change-in-production"
    JWT_SECRET_KEY: str = "dev-jwt-secret-key-change-in-production"
    ENCRYPTION_KEY: str = ""
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    ENCRYPTION_KEY_PATH: str = "./encryption.key"
    
    # Application
    DEBUG: bool = True
    ENVIRONMENT: str = "development"
    LOG_LEVEL: str = "INFO"
    
    # Database Pool Settings
    DB_POOL_SIZE: int = 20
    DB_MAX_OVERFLOW: int = 30
    DB_POOL_TIMEOUT: int = 60
    
    # Cookie Settings
    COOKIE_SECURE: bool = False
    COOKIE_SAMESITE: str = "lax"
    
    # Monitoring Settings
    SERVER_CHECK_INTERVAL: int = 300
    NS_CHECK_INTERVAL: int = 3600
    ALERT_COOLDOWN: int = 1800
    
    # Telegram
    TELEGRAM_BOT_TOKEN: str = ""
    TELEGRAM_CHAT_ID: str = ""
    
    # SSH
    SSH_TIMEOUT: int = 30
    SSH_CONNECT_TIMEOUT: int = 10
    
    # Glances
    GLANCES_POLL_INTERVAL: int = 60
    GLANCES_TIMEOUT: int = 10
    GLANCES_MAX_FAILURES: int = 3
    
    # DNS
    DNS_TIMEOUT: int = 5
    DNS_SERVERS: str = "8.8.8.8,1.1.1.1"
    
    class Config:
        env_file = ".env"
    
    @property
    def dns_servers_list(self) -> List[str]:
        """Get DNS servers as a list."""
        return [server.strip() for server in self.DNS_SERVERS.split(",")]


# Global settings instance
settings = Settings()
EOF

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º backend/database.py
cat > backend/database.py << 'EOF'
"""
Database configuration and session management.
"""
import os
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from typing import Generator

from backend.config import settings

def get_database_url() -> str:
    """Get database URL from environment or settings."""
    return os.getenv("DATABASE_URL", settings.DATABASE_URL)

# Create database engine with pool settings
engine = create_engine(
    get_database_url(),
    pool_pre_ping=True,
    pool_size=settings.DB_POOL_SIZE,
    max_overflow=settings.DB_MAX_OVERFLOW,
    pool_timeout=settings.DB_POOL_TIMEOUT,
    connect_args={"check_same_thread": False} if "sqlite" in get_database_url() else {}
)

# Create session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create base class for models
Base = declarative_base()


def get_db() -> Generator[Session, None, None]:
    """Dependency to get database session."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_db_session():
    """Get database session for scripts."""
    return get_db()
EOF

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ cookie –≤ auth.py –∏ ui/routes.py
if [[ -f "backend/auth.py" ]]; then
    sed -i 's/secure=True/secure=False/g' backend/auth.py
    sed -i 's/samesite="strict"/samesite="lax"/g' backend/auth.py
    sed -i 's/samesite="Strict"/samesite="lax"/g' backend/auth.py
fi

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–∫–æ–≤ –≤ UI routes –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏  
if [[ -f "backend/ui/routes.py" ]]; then
    sed -i 's/secure=not settings\.DEBUG/secure=False/g' backend/ui/routes.py
    # –î–æ–±–∞–≤–ª—è–µ–º samesite="lax" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    sed -i '/httponly=True,$/a\        samesite="lax"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Nginx reverse proxy' backend/ui/routes.py
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
log "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
python3 -c "
try:
    from backend.database import Base, engine
    import backend.models
    Base.metadata.create_all(engine)
    print('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã')
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ –ë–î: {e}')
"

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
log "–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
python3 -c "
try:
    from backend.database import get_db_session
    from backend.models import User
    from backend.auth import get_password_hash
    
    db = next(get_db_session())
    
    admin = db.query(User).filter(User.username == 'admin').first()
    if not admin:
        admin = User(
            username='admin',
            email='admin@example.com',
            password_hash=get_password_hash('admin123'),
            role='admin',
            is_active=True
        )
        db.add(admin)
        db.commit()
        print('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin/admin123')
    else:
        print('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    
    db.close()
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}')
"

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
log "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞..."
cat > /etc/systemd/system/reverse-proxy-monitor.service << EOF
[Unit]
Description=Reverse Proxy Monitor
After=network.target postgresql.service
Requires=postgresql.service

[Service]
Type=simple
User=rpmonitor
Group=rpmonitor
WorkingDirectory=/opt/reverse-proxy-monitor
Environment=PATH=/opt/reverse-proxy-monitor/venv/bin
ExecStart=/opt/reverse-proxy-monitor/venv/bin/python main.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
cat > /etc/nginx/sites-available/reverse-proxy-monitor << EOF
server {
    listen 80;
    server_name _;
    
    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    location /static/ {
        alias /opt/reverse-proxy-monitor/static/;
    }
}
EOF

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–π—Ç–∞
ln -sf /etc/nginx/sites-available/reverse-proxy-monitor /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
nginx -t

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chown -R rpmonitor:rpmonitor /opt/reverse-proxy-monitor/
chmod 600 .env
chmod +x main.py

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl daemon-reload
systemctl enable reverse-proxy-monitor
systemctl enable nginx
systemctl restart nginx
systemctl start reverse-proxy-monitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

# –ü—Ä–æ–≤–µ—Ä–∫–∞
log "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
sleep 5

echo -e "\n${GREEN}=== –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í ===${NC}"
systemctl is-active postgresql && echo "‚úÖ PostgreSQL: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå PostgreSQL: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
systemctl is-active nginx && echo "‚úÖ Nginx: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå Nginx: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
systemctl is-active reverse-proxy-monitor && echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

echo -e "\n${GREEN}=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===${NC}"
curl -I http://localhost/ 2>/dev/null | head -1 && echo "‚úÖ HTTP: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå HTTP: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

echo -e "\n${GREEN}=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –í–•–û–î–ê ===${NC}"
echo "üåê URL: http://$(hostname -I | awk '{print $1}')/"
echo "üë§ –õ–æ–≥–∏–Ω: admin"
echo "üîë –ü–∞—Ä–æ–ª—å: admin123"

echo -e "\n${GREEN}=== –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´ ===${NC}"
echo "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:      sudo systemctl status reverse-proxy-monitor"
echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å:         sudo systemctl restart reverse-proxy-monitor"
echo "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏:       sudo journalctl -u reverse-proxy-monitor -f"

log "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
echo -e "\n${GREEN}=== –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò ===${NC}"
journalctl -u reverse-proxy-monitor --no-pager -n 10
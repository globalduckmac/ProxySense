#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ QueuePool limit –∏ timeout —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import os

def fix_database_config():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ database.py"""
    
    database_file = '/opt/reverse-proxy-monitor/backend/database.py'
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(database_file, 'r') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    old_engine_config = '''engine = create_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    pool_pre_ping=True,
    pool_recycle=300'''
    
    new_engine_config = '''engine = create_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    pool_pre_ping=True,
    pool_recycle=300,
    pool_size=20,
    max_overflow=30,
    pool_timeout=60'''
    
    if old_engine_config in content:
        content = content.replace(old_engine_config, new_engine_config)
        
        with open(database_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ database.py")
        return True
    else:
        print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è engine –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        alt_config = '''engine = create_engine(settings.DATABASE_URL'''
        if alt_config in content:
            # –ó–∞–º–µ–Ω–∏–º –≤—Å—é —Å—Ç—Ä–æ–∫—É —Å–æ–∑–¥–∞–Ω–∏—è engine
            import re
            pattern = r'engine = create_engine\([^)]*\)'
            replacement = '''engine = create_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    pool_pre_ping=True,
    pool_recycle=300,
    pool_size=20,
    max_overflow=30,
    pool_timeout=60
)'''
            content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
            
            with open(database_file, 'w') as f:
                f.write(content)
            
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è engine")
            return True
        
        return False

def fix_session_management():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –≤ routes.py"""
    
    routes_file = '/opt/reverse-proxy-monitor/backend/ui/routes.py'
    
    with open(routes_file, 'r') as f:
        content = f.read()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_current_user_optional –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–π
    new_function = '''def get_current_user_optional(request: Request, db: Session = Depends(get_db)) -> Optional[User]:
    """Get current user from session, return None if not authenticated."""
    try:
        token = request.cookies.get("access_token")
        logger.info(f"Cookie access_token: {token is not None}")
        if not token:
            logger.info("No access_token cookie found")
            return None
        
        from backend.auth import verify_token
        username = verify_token(token)
        logger.info(f"Token verified, username: {username}")
        if not username:
            logger.info("Token verification failed")
            return None
        
        user = db.query(User).filter(User.username == username).first()
        result = user if user and user.is_active else None
        logger.info(f"User lookup result: {result is not None}")
        
        # –Ø–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        try:
            db.close()
        except:
            pass
            
        return result
    except Exception as e:
        logger.error(f"Error in get_current_user_optional: {e}")
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            db.close()
        except:
            pass
        return None'''
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –∑–∞–º–µ–Ω—è–µ–º
    import re
    pattern = r'def get_current_user_optional\(.*?\n(?:(?:    .*\n)*?)(?=\n\n@|\n\nasync def|\n\ndef |$)'
    
    if re.search(pattern, content, re.MULTILINE | re.DOTALL):
        content = re.sub(pattern, new_function, content, flags=re.MULTILINE | re.DOTALL)
        
        with open(routes_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –≤ get_current_user_optional")
        return True
    else:
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è get_current_user_optional –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def restart_service():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å"""
    os.system("systemctl restart reverse-proxy-monitor")
    print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î...")
    
    db_fixed = fix_database_config()
    session_fixed = fix_session_management()
    
    if db_fixed or session_fixed:
        print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
        restart_service()
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        print("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 20 + 30 overflow")
        print("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π")
    else:
        print("\n‚ö†Ô∏è –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")